{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Previewer","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","iconClass","styles","maxWidth","enlarge","react_default","a","createElement","id","style","className","onClick","max","react_markdown_default","source","text","React","Component","Markdown","editorLeft","height","leftNav","position","top","onChange","handleChange","input","App","_this","state","Placeholder","editorMax","previewerMax","editor","bind","assertThisInitialized","previewer","e","setState","target","value","Editor","App_Markdown","Preview","App_Previewer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.daa26189.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\nimport ReactMarkdown from 'react-markdown';\n\nclass Previewer extends React.Component {\n  constructor(props){\n    super(props);\n  }\n    render(){\n    let iconClass = 'fa fa-arrows-alt';\n    let styles = { maxWidth: '700px' }\n    \n    if(this.props.enlarge) {\n      iconClass = 'fa fa-compress';\n      styles = { maxWidth: 'none' }\n    }\n      return(\n        <div id=\"previewRight\" style={styles}>\n          <div className=\"title\">\n            <span>Preview</span><i onClick={this.props.max} className={iconClass}></i>\n          </div>\n          <div id=\"preview\">\n            <ReactMarkdown source={this.props.text}/>\n          </div>\n        </div>\n      )\n    }\n}\n\nclass Markdown extends React.Component {\n  constructor(props){\n    super(props);\n  }\n  render(){\n    let iconClass = 'fa fa-arrows-alt';\n    let styles = {\n      editorLeft: {height:'230px'},\n      leftNav: {maxWidth: '480px'},\n    }\n    \n    if(this.props.enlarge) {\n      iconClass = 'fa fa-compress';\n      styles = {\n        editorLeft: { height:'500px'},\n        leftNav: { maxWidth: 'none', position: 'absolute', top:'30px'}\n      }\n    }\n    return(\n      <div style={styles.leftNav} id=\"leftNav\">\n        <div style={styles.editorLeft}id=\"editorLeft\">\n          <div className=\"title\">\n            <span>Editor</span><i onClick={this.props.max} className={iconClass}></i>\n          </div>\n          <textarea id='editor' onChange={this.props.handleChange}>{this.props.input}</textarea>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      input: Placeholder,\n      editorMax: false,\n      previewerMax: false\n    }\n    this.editor = this.editor.bind(this);\n    this.previewer = this.previewer.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      input: e.target.value\n    });\n  }\n  editor(){\n    this.setState({\n      editorMax: !this.state.editorMax\n    });\n  }\n  previewer(){\n    this.setState({\n      previewerMax: !this.state.previewerMax\n    });\n  }\n  render(){\n    const Editor = <Markdown enlarge={this.state.editorMax} handleChange={this.handleChange} input={this.state.input} max={this.editor}/>\n    const Preview = <Previewer enlarge={this.state.previewerMax} text={this.state.input} max={this.previewer}/>\n          \n    if(this.state.editorMax) return ( <div id=\"content\">{Editor}</div> );\n    if(this.state.previewerMax) return ( <div id=\"content\">{Preview}</div> );\n    return (  <div id=\"content\">{Editor} {Preview}</div> );\n  }\n}\n\nconst Placeholder =\n`# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}